@page "/account/register"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Leagify.AuctionDrafter.Shared.Dtos
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<h3>Register New Account</h3>

<EditForm Model="@model" OnValidSubmit="HandleRegisterAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="model.Email" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password:</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="model.ConfirmPassword" />
        <ValidationMessage For="@(() => model.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Registering...</span>
        }
        else
        {
            <span>Register</span>
        }
    </button>
</EditForm>

@code {
    private RegisterRequestDto model = new RegisterRequestDto();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleRegisterAsync()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var authResponse = await AuthService.RegisterAsync(model);

            if (authResponse != null && authResponse.IsSuccess)
            {
                successMessage = authResponse.Message + " You can now try logging in.";
                model = new RegisterRequestDto(); // Clear form
                // Optionally redirect to login page or show a link
                // NavigationManager.NavigateTo("/account/login");
            }
            else
            {
                errorMessage = authResponse?.Message ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            // Log full exception ex for debugging
        }
        finally
        {
            isLoading = false;
        }
    }
}
